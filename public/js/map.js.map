{"version":3,"sources":["map.js"],"names":[],"mappingsfile":"map.js","sourcesContent":["$(function(){\n\n  var baseLayer = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',{attribution: 'Tiles &copy; CartoDB'});\n\n  $.datas.map = L.map('wo_map', {\n    layers:[baseLayer],\n    center: [ 48.209272, 16.372801],\n    zoom:12,\n    zoomControl: false,\n  });\n\n  new L.Control.Zoom({ position: 'topright' }).addTo($.datas.map);\n  L.control.fullscreen({\n    position:'topright',\n    title:{\n      'false': 'Vollbildanzeige',\n      'true': 'Vollbild verlassen'\n    }\n  }).addTo($.datas.map);\n\n\n  // DRAW ICON BY DRAGGING ON MAP\n  // var drawnItems = new L.FeatureGroup();\n  // //$.datas.map.addLayer(drawnItems);\n  //\n  // // Initialise the draw control and pass it the FeatureGroup of editable layers\n  // var drawControl = new L.Control.Draw({\n  //     position:'topright',\n  //     edit: {\n  //         featureGroup: drawnItems,\n  //     },\n  //     draw:{\n  //       polyline:false,\n  //       polygon:false,\n  //       rectangle:false,\n  //       circle:false\n  //     }\n  // });\n  // drawControl.addTo($.datas.map);\n  // $.datas.map.on('draw:created', function (e) {\n  //   var type = e.layerType,\n  //       layer = e.layer;\n  //\n  //   if (type === 'marker') {\n  //       // Do marker specific actions\n  //       console.log('markt')\n  //   }\n  //\n  //   // Do whatever else you need to. (save to db, add to map etc)\n  //   $.datas.map.addLayer(layer);\n  // });\n\n\n  // LOCATE ME\n  L.control.locate({\n      position: 'topright',  // set the location of the control\n      layer: undefined,  // use your own layer for the location marker, creates a new layer by default\n      drawCircle: true,  // controls whether a circle is drawn that shows the uncertainty about the location\n      follow: true,  // follow the user's location\n      setView: true, // automatically sets the map view to the user's location, enabled if `follow` is true\n      keepCurrentZoomLevel: false, // keep the current map zoom level when displaying the user's location. (if `false`, use maxZoom)\n      stopFollowingOnDrag: false, // stop following when the map is dragged if `follow` is true (deprecated, see below)\n      remainActive: false, // if true locate control remains active on click even if the user's location is in view.\n      markerClass: L.circleMarker, // L.circleMarker or L.marker\n      circleStyle: {\n        color:'#EB5B27',\n        opacity:0.2,\n        fillColor:'#EB5B27'\n      },  // change the style of the circle around the user's location\n      markerStyle: {\n        color:'#EB5B27',\n        opacity:1,\n        fillColor:'#EB5B27'\n      },\n      followCircleStyle: {},  // set difference for the style of the circle around the user's location while following\n      followMarkerStyle: {},\n      icon: 'fa fa-map-marker',  // class for icon, fa-location-arrow or fa-map-marker\n      iconLoading: 'fa fa-spinner fa-spin',  // class for loading icon\n      iconElementTag: 'span',  // tag for the icon element, span or i\n      circlePadding: [0, 0], // padding around accuracy circle, value is passed to setBounds\n      metric: true,  // use metric or imperial units\n      onLocationError: function(err) {alert(err.message)},  // define an error callback function\n      onLocationOutsideMapBounds:  function(context) { // called when outside map boundaries\n              alert(context.options.strings.outsideMapBoundsMsg);\n      },\n      showPopup: true, // display a popup when the user click on the inner marker\n      strings: {\n          title: \"Zeige mir wo ich bin\",  // title of the locate control\n          metersUnit: \"metern\", // string for metric units\n          feetUnit: \"feet\", // string for imperial units\n          popup: \"Du befindest dich im Umkreis von {distance} {unit} zu diesem Punkt\",  // text to appear if user clicks on circle\n          outsideMapBoundsMsg: \"Du befindest dich au√üerhalb der Grenzen dieser Karte!?\" // default message for onLocationOutsideMapBounds\n      },\n      locateOptions: {}  // define location options e.g enableHighAccuracy: true or maxZoom: 10\n  }).addTo($.datas.map);\n\n  L.Util.ajax(\"/api/pois/all\").then(function(data){\n    L.geoJson.css(data).addTo($.datas.map);\n  });\n\n});\n"],"sourceRoot":"/source/"}